/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<MOVES:  "Moves">
		| 	<RIGHT: "RIGHT">
		| 	<PUT: "Put">
		|  < POP: "Pop" >
		|  <GO: "GO" >
        |  < HOP:  "HOP" >
        
        |  <TURNTOMY: "TurnToMy" >
        |  <TURNTOTHE: "TurnToThe" >
        |  <WALK: "Walk" >
        |  <JUMP: "Jump" >
        |  <DROP: "Drop" >
        |  <WALK: "Walk" >
        | 	<PICK: "Pick">
        | 	<GRAB: "Grab">
        | 	<LETGO: "LetGo">
        | 	<POP: "Pop">
        | <NOP: "Nop">
        | <SAFEEXEC: "SafeExec">
        | 	<ISBLOCKED: "IsBlocked">
        | 	<ISFACING: "IsFacing">
        | 	<ZERO: "Zero">
        | 	<NOT: "Not">
        |	< IF: "if" >

}

TOKEN:
{
		<RIGHT: "right">
		| <LEFT: "left">
		| <BACK: "back">
		| <NORTH: "north">
		| <SOUTH: "south">
		| <EAST: "east">
		| <WEST: "west">
		| <FRONT: "Front">
		| <COMA:"," >
}



TOKEN :
{
		<NUM: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
        
}



	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(		  (
		   <WALK>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<JUMP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		|  <DROP> "("  x=num() ")" {world.putChips(x); salida = "Command:  Put Chips"; }					  			
		|  <PICK> "(" x=num()  ")"	{world.pickChips(x);salida = "Command:  Pick chips";}
	    |  <POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
	    | <GRAB> "(" x=num() ")" {world.grabBalloons(x);salida="Command:  Grab balloons";}
	    | <LETGO> "(" x=num() ")" {world.putBalloons(x); salida = "Command:  LetGo Balloons";}
	    |  <TURNTOMY > "(" turntomy() ")"
	    | <TURNTOTHE> "(" turntothe() ")"
	    | <IF> "(" condi_if() 
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

//cambios_p1
	void comandos(): { }{ 
		<WALK>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<JUMP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		|  <DROP> "("  x=num() ")" {world.putChips(x); salida = "Command:  Put Chips"; }					  			
		|  <PICK> "(" x=num()  ")"	{world.pickChips(x);salida = "Command:  Pick chips";}
	    |  <POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
	    | <GRAB> "(" x=num() ")" {world.grabBalloons(x);salida="Command:  Grab balloons";}
	    | <LETGO> "(" x=num() ")" {world.putBalloons(x); salida = "Command:  LetGo Balloons";}
	    |  <TURNTOMY > "(" turntomy() ")"
	    | <TURNTOTHE> "(" turntothe() ")" }
	



	void turntomy() :
	{
	}
	{
	  (<RIGHT> { world.turnRight(); salida = "Command: turn right";})
	| (<LEFT> { world.turnRight(); world.turnRight(); world.turnRight(); salida = "Command: turn left"; })
	| (<BACK> { world.turnRight(); world.turnRight(); salida = "Command: turn back"; })	    
	}

	void turntothe():
	{
	  int currentFacing;
	  int turnsNeeded = 0;
	  int targetDirection;
	}
	{
	  (
      <NORTH> { targetDirection = 0; }
    |
      <SOUTH> { targetDirection = 1; }
    |
      <EAST> { targetDirection = 2; }
    |
      <WEST> { targetDirection = 3; }
    )
    {
        currentFacing = world.getFacing();  // Obtener la dirección actual

        // Calcular el número de giros a la derecha necesarios
        if (0.equals(currentFacing)) {
            if (2.equals(targetDirection)) { turnsNeeded = 1; }
            else if (1.equals(targetDirection)) { turnsNeeded = 2; }
            else if (3.equals(targetDirection)) { turnsNeeded = 3; }
        } else if (2.equals(currentFacing)) {
            if (1.equals(targetDirection)) { turnsNeeded = 1; }
            else if (3.equals(targetDirection)) { turnsNeeded = 2; }
            else if (0.equals(targetDirection)) { turnsNeeded = 3; }
        } else if (1.equals(currentFacing)) {
            if (3.equals(targetDirection)) { turnsNeeded = 1; }
            else if (0.equals(targetDirection)) { turnsNeeded = 2; }
            else if (2.equals(targetDirection)) { turnsNeeded = 3; }
        } else if (3.equals(currentFacing)) {
            if (0.equals(targetDirection)) { turnsNeeded = 1; }
            else if (2.equals(targetDirection)) { turnsNeeded = 2; }
            else if (1.equals(targetDirection)) { turnsNeeded = 3; }
        }

        // Realizar los giros a la derecha
        for (int i = 0; i < turnsNeeded; i++) {
            world.turnRight();
        }

        // Mensaje de salida
        salida = "Command: Turn to " + targetDirection;
    } 	    
	}

	void moves():
	{
	  int orinalFacing = world.getFacing();
	  int currentFacing;
	  int turnsNeeded = 0;
	}
	{
	  direction()
	  (<COMMA> direction())*
	  {
	    currentFacing = world.getFacing();  // Obtener la dirección actual

        // Calcular el número de giros a la derecha necesarios
        if (0.equals(currentFacing)) {
            if (2.equals(orinalFacing)) { turnsNeeded = 1; }
            else if (1.equals(orinalFacing)) { turnsNeeded = 2; }
            else if (3.equals(orinalFacing)) { turnsNeeded = 3; }
        } else if (2.equals(currentFacing)) {
            if (1.equals(orinalFacing)) { turnsNeeded = 1; }
            else if (3.equals(orinalFacing)) { turnsNeeded = 2; }
            else if (0.equals(orinalFacing)) { turnsNeeded = 3; }
        } else if (1.equals(currentFacing)) {
            if (3.equals(orinalFacing)) { turnsNeeded = 1; }
            else if (0.equals(orinalFacing)) { turnsNeeded = 2; }
            else if (2.equals(orinalFacing)) { turnsNeeded = 3; }
        } else if (3.equals(currentFacing)) {
            if (0.equals(orinalFacing)) { turnsNeeded = 1; }
            else if (2.equals(orinalFacing)) { turnsNeeded = 2; }
            else if (1.equals(orinalFacing)) { turnsNeeded = 3; }

        for (int i = 0; i < turnsNeeded; i++) {
            world.turnRight();
        }
	  }
	}
	}
	

	void direction():
	{}
	{
	(
      <FORWARD> { world.moveForward(1, false); }
    |
      <RIGHT> { turnRight(); world.moveForward(1, false);}
    |
      <LEFT> { turnRight(); turnRight(); turnRight(); world.moveForward(1, false);}
    |
      <BACKWARDS> {turnRight(); turnRight(); moveForward(1, false);}
    )
    
	}

	void condi_if():
	{
	  boolean check;
	  point p = world.getPosition;
	}
	{
	  (<ISFACING> "?" "(" < NORTH > ")" {check = world.facingNorth();}
	| <ISFACING> "?" "(" < SOUTH > ")" {check = world.facingSouth();}
	| <ISFACING> "?" "(" < EAST > ")" {check = world.facingEast();}
	| <ISFACING> "?" "(" < WEST > ")" {check = world.facingWest();}
	| <ZERO > "?" "(" x=num() ")" {if ( x.equals(0)) { check = true} }	  )
	}


	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{
	  
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	